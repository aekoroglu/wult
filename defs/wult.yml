# -*- coding: utf-8 -*-
# vim: ts=4 sw=4 tw=100 et ai si
#
# Definitions for wult CSV file.

WakeLatency:
    title: "C-state wake latency"
    descr: >-
        The time between the moment the delayed event was generated (launch time) till the moment
        the measured CPU started executing instructions after it woke up from a C-state. Note, the
        delayed event may be generated by many event sources, like an I210 network adapter or the
        TSC deadline timer. There may be subtleties related to that. For example, in the former
        case, the NIC sends an MSI message to the PCIe host at launch time. The PCIe link may be in
        a low power state (L-state), depending on whether PCIe ASPM is enabled. There may be
        multiple PCIe bridges between the NIC and the host. This pretty much depends on the platform
        configuration.
    type: "float"
    unit: "microsecond"
    short_unit: "us"
    default_funcs: ["min", "max", "avg", "med", "std", "N%"]
    optional: False
    drop_if_same_as: "IntrLatency"
SilentTime:
    title: "Silent Time"
    descr: >-
        Time spent in a C-state before the the launch time (the moment the delayed event is
        generated). Or to put it differently, 'SilentTime' is time before idle minus launch time.
    type: "float"
    unit: "microsecond"
    short_unit: "us"
    default_funcs: ["min", "max"]
    optional: False
IntrLatency:
    title: "Interrupt latency"
    descr: >-
        The time between the moment the delayed event was generated (launch time) till the moment
        the interrupt handler of the delayed event was executed.
    type: "float"
    unit: "microsecond"
    short_unit: "us"
    default_funcs: ["min", "max", "avg", "med", "std", "N%"]
    optional: True
LDist:
    title: "Launch Distance"
    descr: >-
        How far in the future wult scheduled the event.
    type: "float"
    unit: "microsecond"
    short_unit: "us"
    default_funcs: ["min", "max"]
    optional: False
ReqCState:
    title: "Requested C-State name"
    descr: >-
        The requested C-state name. This is the Linux CPU C-state name, do not confuse it with
        hardware C-state names.
    type: "str"
    optional: False
CC0%:
    title: "Busy percent"
    descr: >-
        Percent of the time spent in the C0 state over the idle period. Calculated as
        ('CC0Cyc' / 'TotCyc') * 100.
    type: "float"
    unit: "%"
    short_unit: "%"
    default_funcs: "all"
    optional: False
CC1Derived%:
    title: "Derived CC1%"
    descr: >-
        Percent of the time spent in the CC1 state over the idle period. Calculated as
        ('TotCyc' - 'CC0Cyc') / 'TotCyc' * 100.
    type: "float"
    unit: "%"
    short_unit: "%"
    default_funcs: "all"
    optional: True
    drop_empty: True
CCx%:
    title: "The CCx core C-state residency"
    descr: >-
        Percent of the time spent in the CCx core C-state state over the idle period. Calculated as
        ('CCxCyc' / 'TotCyc') * 100.
    type: "float"
    unit: "%"
    short_unit: "%"
    default_funcs: "all"
    optional: True
    drop_empty: True
PCx%:
    title: "The PCx package C-state residency"
    descr: >-
        Percent of the time spent in the PCx package state over the idle period. Calculated as
        ('PCxCyc' / 'TotCyc') * 100.
    type: "float"
    unit: "%"
    short_unit: "%"
    default_funcs: "all"
    optional: True
    drop_empty: True
SMICnt:
    title: "SMI count while measuring 'WakeLatency' or 'IntrLatency'"
    descr: >-
        How many system management interupts (SMI) happened while measuring 'WakeLatency' and
        'IntrLatency'.
    type: "int"
    optional: True
    drop_empty: True
NMICnt:
    title: "NMI count while measuring 'WakeLatency' or 'IntrLatency'"
    descr: >-
        How many non-maskable interrupts (NMI) happened while measuring 'WakeLatency' and
        'IntrLatency'.
    type: "int"
    optional: True
    drop_empty: True
WarmupDelay:
    title: "The I210 NIC link warm up delay"
    descr: >-
        When the CPU wakes up from the C-state, wult first warms up the PCIe link(s) by reading the
        I210 NIC status register. This read will make sure the PCIe link(s) are ready for the time
        after idle read operation. For example, if the link(s) were in an L1 state due to ASPM, they
        will be woken up from this state. 'WarmupDelay' is the time it takes to read the I210 NIC
        status register. It is measured using TSC, and gets subtracted it from the "time after
        idle" timestamp that is read later. In other words, 'WakeLatency' does not include
        'WarmupDelay'.
    type: "float"
    unit: "microsecond"
    short_unit: "us"
    default_funcs: ["min", "max", "avg", "med", "std", "N%"]
    optional: True
LatchDelay:
    title: "The I210 NIC time latch delay"
    descr: >-
        When the CPU wakes up from the C-state, wult first reads the status register to warm up the
        link (see 'WarmupDelay'), and right after that it latches I210 NIC time by reading the
        "System Time Residue Register" ('SYSTIMR', 0xB6F8). 'LatchDelay' is the time it takes to
        read the 'SYSTIMR' register. It is measured using TSC. The I210 NIC latches the time when it
        sees the 'SYSTIMR' read operation. The assumption is that it will take half of the
        'LatchDelay' for the 'SYSTIMR' read request to propagate from the CPU to the I210 NIC.
        Therefore, half of 'LatchDelay' later gets subtracted from 'WakeLatency'.
    type: "float"
    unit: "microsecond"
    short_unit: "us"
    default_funcs: ["min", "max", "avg", "med", "std", "N%"]
    optional: True
    drop_if_same_as: "IntrLatency"
