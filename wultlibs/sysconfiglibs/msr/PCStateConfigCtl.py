# -*- coding: utf-8 -*-
# vim: ts=4 sw=4 tw=100 et ai si
#
# Copyright (C) 2020-2021 Intel Corporation
# SPDX-License-Identifier: BSD-3-Clause
#
# Author: Antti Laakso <antti.laakso@linux.intel.com>

"""
This module provides API for managing settings in MSR 0xE2 (MSR_PKG_CST_CONFIG_CONTROL). This is a
model-specific register found on many Intel platforms.
"""

from wultlibs.helperlibs import Procs
from wultlibs.sysconfiglibs import CPUInfo
from wultlibs.sysconfiglibs.msr import MSR
from wultlibs.helperlibs.Exceptions import ErrorNotSupported

# Package C-state configuration control Model Specific Register.
MSR_PKG_CST_CONFIG_CONTROL = 0xE2
CFG_LOCK = 15
C1_AUTO_DEMOTION_ENABLE = 26
MAX_PKG_C_STATE_MASK = 0xF

class PCStateConfigCtl:
    """
    This class provides API for managing settings in MSR 0xE2 (MSR_PKG_CST_CONFIG_CONTROL). This is
    a model-specific register found on many Intel platforms.
    """

    def c1_auto_demotion_enabled(self, cpu):
        """
        Returns 'True' if C1 auto demotion is enabled for CPU 'cpu', otherwise returns 'False'.
        """

        regval = self._msr.read(MSR_PKG_CST_CONFIG_CONTROL, cpu=cpu)
        return MSR.is_bit_set(C1_AUTO_DEMOTION_ENABLE, regval)

    def set_c1_auto_demotion(self, enable: bool, cpus="all"):
        """
        Enable or disable C1 autopromote for CPUs 'cpus'. The 'cpus' argument is the same as the
        'cpus' argument of the 'CPUIdle.get_cstates_info()' function - please, refer to the
        'CPUIdle' module for the exact format description.
        """
        self._msr.toggle_bit(MSR_PKG_CST_CONFIG_CONTROL, C1_AUTO_DEMOTION_ENABLE, enable, cpus=cpus)

    def __init__(self, proc=None, lscpu_info=None):
        """
        The class constructor. The argument are as follows.
          * proc - the 'Proc' or 'SSH' object that defines the host to run the measurements on.
          * lscpu_info - CPU information generated by 'CPUInfo.get_lscpu_info()'.
        """

        if not proc:
            proc = Procs.Proc()

        self._proc = proc
        self._lscpu_info = lscpu_info
        self._msr = MSR.MSR(proc=self._proc)

        if self._lscpu_info is None:
            self._lscpu_info = CPUInfo.get_lscpu_info(proc=self._proc)

        if self._lscpu_info["vendor"] != "GenuineIntel":
            raise ErrorNotSupported(f"unsupported CPU model '{self._lscpu_info['vendor']}', "
                                    f"model-specific register {hex(MSR_PKG_CST_CONFIG_CONTROL)} "
                                    f"(MSR_PKG_CST_CONFIG_CONTROL) is not available"
                                    f"{self._proc.hostmsg}. MSR_PKG_CST_CONFIG_CONTROL is "
                                    f"available only on Intel platforms")

    def close(self):
        """Uninitialize the class object."""

        if getattr(self, "_proc", None):
            self._proc = None
        if getattr(self, "_msr", None):
            self._msr.close()
            self._msr = None

    def __enter__(self):
        """Enter the runtime context."""
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        """Exit the runtime context."""
        self.close()
