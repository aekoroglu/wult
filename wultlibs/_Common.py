# -*- coding: utf-8 -*-
# vim: ts=4 sw=4 tw=100 et ai si
#
# Copyright (C) 2020 Intel Corporation
# SPDX-License-Identifier: BSD-3-Clause
#
# Author: Antti Laakso <antti.laakso@linux.intel.com>

"""This module contains common code shared only within wultlibs libraries."""

from wultlibs.helperlibs import Trivial
from wultlibs.helperlibs.Exceptions import Error
from wultlibs.sysconfiglibs import CPUInfo

def validate_ldist(ldist):
    """
    Validate and modify launch distanse. 'ldist' argument is string of single or two comma-separated
    integers, and tells launch distance in microseconds. Return value is launch distance in
    nanoseconds, as list of one or two integers.
    """

    ldst = Trivial.split_csv_line(ldist)

    for idx, val in enumerate(ldst):
        ldst[idx] = Trivial.str_to_num(val, default=None)
        if ldst[idx] is None:
            raise Error(f"bad launch distance '{ldist}', should be an integer")
        if ldst[idx] <= 0:
            raise Error(f"bad launch distance value '{ldst[idx]}', should be greater than zero")

    ldst_str = ", ".join([str(val) for val in ldst])
    if len(ldst) > 2:
        raise Error(f"bad launch distance range '{ldst_str}', it should include 2 numbers")
    if len(ldst) == 2 and ldst[1] - ldst[0] < 0:
        raise Error(f"bad launch distance range '{ldst_str}', first number cannot be "
                    f"greater than the second number")

    # Return launch distance as nanoseconds.
    for idx, val in enumerate(ldst):
        ldst[idx] = val * 1000

    return ldst

def validate_cpunum(cpunum, proc=None):
    """
    Validate CPU number 'cpunum'. The optional 'cpugeom' argument is the CPU geometry dictionary
    generated by 'CPUInfo.get_cpu_geometry()' function. If 'proc' is not provided, this function
    just checks that 'cpunum' is a positive integer number, nothing else.

    If 'proc' is provided, then this function discovers CPU count on the host associated with
    'proc', and verifies that 'cpunum' does not exceed the host CPU count and the CPU is online.
    Note, 'proc' shoulc be an 'SSH' or 'Proc' object.
    """

    if not Trivial.is_int(cpunum) or int(cpunum) < 0:
        raise Error(f"bad CPU number '{cpunum}', should be a positive integer")

    cpunum = int(cpunum)

    if proc:
        with CPUInfo.CPUInfo(proc=proc) as cpuinfo:
            cpugeom = cpuinfo.get_cpu_geometry()

        if cpunum in cpugeom["offcpus"]:
            raise Error(f"CPU '{cpunum}'{proc.hostmsg} is offline")
        if cpunum not in cpugeom["cpus"]:
            raise Error(f"CPU '{cpunum}' does not exist{proc.hostmsg}")

    return cpunum
