# -*- coding: utf-8 -*-
# vim: ts=4 sw=4 tw=100 et ai si
#
# Copyright (C) 2022 Intel Corporation
# SPDX-License-Identifier: BSD-3-Clause
#
# Authors: Adam Hawley <adam.james.hawley@intel.com>

"""
This module provides the capability of populating a "SysInfo" data tab.

"SysInfo" tabs contain various system information about the systems under test (SUTs).
"""

import logging
from pepclibs.helperlibs.Exceptions import Error
from wultlibs.helperlibs import FSHelpers
from wultlibs.htmlreport.tabs import _Tabs

_LOG = logging.getLogger()

class SysInfoDTabBuilderBase:
    """
    This class provides the capability of populating a "SysInfo" tab.

    Public method overview:
     * get_tab() - returns a '_Tabs.DTabDC' instance which represents system information.
    """

    def _add_fpreviews(self, stats_paths):
        """
        Returns a list of '_Tabs.FilePreviewDC' instances to include in the tab generated by
        'get_tab()'. Adds files found in 'stats_paths'.
        """

        if any(not fp for fp in stats_paths.values()):
            raise Error("Unable to add file previews since not all reports have a statistics dir.")

        fpreviews = []
        for name, fp in self.files.items():
            paths = {}
            for reportid, stats_path in stats_paths.items():
                src_path = stats_path / fp

                if not src_path.exists():
                    # If one of the reports does not have a file, exclude the file preview entirely.
                    paths = {}
                    _LOG.debug("skipping file preview '%s' since the file '%s' doesn't exist for "
                               "all reports.", name, fp)
                    break

                # If the file is not in 'outdir' it should be copied to 'outdir'.
                if self.outdir not in src_path.parents:
                    dst_dir = self.outdir / reportid

                    try:
                        dst_dir.mkdir(parents=True, exist_ok=True)
                    except OSError as err:
                        raise Error(f"can't create SysInfo output directory '{dst_dir}': "
                                    f"{err}") from None

                    dst_path = dst_dir / fp
                    FSHelpers.move_copy_link(src_path, dst_path, "copy")
                else:
                    dst_path = src_path

                paths[reportid] = dst_path.relative_to(self.outdir)

            if paths:
                fpreviews.append(_Tabs.FilePreviewDC(name, paths))
        return fpreviews

    def get_tab(self, stats_paths):
        """
        Returns a '_Tabs.DTabDC' instance which represents system information. Arguments are as
        follows:
         * stats_paths - a dictionary in the format '{ReportID: StatsDir}' where 'StatsDir' is the
                         path to the directory which contains raw statistics files for 'ReportID'.
        """

        fpreviews = self._add_fpreviews(stats_paths)
        if fpreviews:
            return _Tabs.DTabDC(self.name, fpreviews=fpreviews)
        raise Error(f"Unable to build '{self.name}' SysInfo tab, no file previews could be "
                    f"generated.")

    def __init__(self, name, outdir, files):
        """
        Class constructor. Arguments are as follows:
         * name - name to give the tab produced when 'get_tab()' is called.
         * outdir - the directory to store tab files in.
         * files - a dictionary containing the paths of files to include file previews for.
                   Expected to be in the format '{Name: FilePath}' where 'Name' will be the title
                   of the file preview and 'FilePath' is the path of the file to preview.
                   'FilePath' should be relative to the directories in 'stats_paths'
        """

        self.name = name
        self.outdir = outdir
        self.files = files
