#!/usr/bin/python3
#
# -*- coding: utf-8 -*-
# vim: ts=4 sw=4 tw=100 et ai si
#
# Copyright (C) 2019-2020 Intel Corporation
# SPDX-License-Identifier: BSD-3-Clause
#
# Author: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>

"""
wult - a tool for measuring C-state latency.
"""

import sys
import logging
import argparse
import contextlib
from pathlib import Path

try:
    import argcomplete
except ImportError:
    # We can live without argcomplete, we only lose tab completions.
    argcomplete = None

from wultlibs.helperlibs import Logging, ArgParse, ReportID, Trivial, KernelVersion, Human
from wultlibs.helperlibs.Exceptions import Error, ErrorNotSupported
from wultlibs.reportlibs import WultHTMLReport
from wultlibs.rawresultlibs import WORawResult
from wultlibs.sysconfiglibs import CPUIdle, PowerCtl
from wultlibs import ToolsCommon, Devices, EventsProvider, WultRunner

VERSION = "1.9.1"
OWN_NAME = "wult"

# By default 'ReportID' module does not allow for the ":" character, but it is part of the PCI
# address, and we allow for PCI addresses as device IDs. Here are few constants that we use to
# extend the default allowed report ID characters set.
REPORTID_ADDITIONAL_CHARS = ":"
REPORTID_CHARS_DESCR = ReportID.get_charset_descr(additional_chars=REPORTID_ADDITIONAL_CHARS)

# Regular expressions for the datapoint CSV file columns names that should show up in the hover
# text of the scatter plot. The middle element selects all the core and package C-state residency
# columns.
HOVER_COLNAME_REGEXS = [".*Latency", ".*Delay", "LDist", "ReqCState", r"(Derived)?[PC]C.+%",
                        "CStates.*", "NMI.*"]

LOG = logging.getLogger()
Logging.setup_logger(OWN_NAME)

def get_axes_default(name):
    """Returns the default CSV column names for X- or Y-axes, as well as histograms."""

    names = getattr(WultHTMLReport, f"DEFAULT_{name.upper()}")
    # The result is used for argparse, which does not accept '%' symbols.
    return names.replace("%", "%%")

def build_arguments_parser():
    """Build and return the arguments parser object."""

    text = "wult - a tool for measuring C-state latency."
    parser = ArgParse.ArgsParser(description=text, prog=OWN_NAME, ver=VERSION)

    text = "Force coloring of the text output."
    parser.add_argument("--force-color", action="store_true", help=text)
    subparsers = parser.add_subparsers(title="commands", metavar="")
    subparsers.required = True

    #
    # Create parsers for the "deploy" command.
    #
    ToolsCommon.add_deploy_cmdline_args(subparsers, OWN_NAME, ToolsCommon.deploy_command,
                                        drivers=True, helpers=False, argcomplete=argcomplete)

    #
    # Create parsers for the "scan" command.
    #
    text = "Scan for device id."
    descr = """Scan for compatible device."""
    subpars = subparsers.add_parser("scan", help=text, description=descr)
    subpars.set_defaults(func=ToolsCommon.scan_command)

    ToolsCommon.add_ssh_options(subpars, argcomplete)

    #
    # Create parsers for the "load" command.
    #
    text = f"Load {OWN_NAME} drivers and exit."
    descr = f"""Load {OWN_NAME} drivers and exit without starting the measurements."""
    subpars = subparsers.add_parser("load", help=text, description=descr)
    subpars.set_defaults(func=load_command)

    text = """This command exists for debugging and troubleshooting purposes. Please, do not use for
              other reasons. keep in mind that if the the specified \'devid\' device was bound to
              some driver (e.g., a network driver), it will be unbinded and with this option It
              won't be binded back."""

    subpars.add_argument("--no-unload", action="store_true", help=text)

    text = f"""By default {OWN_NAME} refuses to load network card drivers if its Linux network
               interface is in an active state, such as "up". Use '--force' to disable this safety
               mechanism. Use '--force' option with caution."""
    subpars.add_argument("--force", action="store_true", help=text)

    text = "The device ID, same as in the 'start' command."""
    subpars.add_argument("devid", help=text)

    ToolsCommon.add_ssh_options(subpars, argcomplete)

    #
    # Create parsers for the "start" command.
    #
    text = "Start the measurements."
    descr = """Start measuring and recording C-state latency."""
    subpars = subparsers.add_parser("start", help=text, description=descr)
    subpars.set_defaults(func=start_command)

    ToolsCommon.add_ssh_options(subpars, argcomplete)

    subpars.add_argument("-c", "--datapoints", default=1000000, metavar="COUNT", dest="dpcnt",
                         help=ToolsCommon.DATAPOINTS_DESCR)
    subpars.add_argument("--time-limit", dest="tlimit", metavar="LIMIT",
                         help=ToolsCommon.TIME_LIMIT_DESCR)
    # This is a deprecated option. We keep it for backward compatibility. Remove it in 2022.
    subpars.add_argument("--continue", dest="cont", action="store_true", help=argparse.SUPPRESS)
    subpars.add_argument("--start-over", action="store_true", help=ToolsCommon.START_OVER_DESCR)

    arg = subpars.add_argument("-o", "--outdir", type=Path, help=ToolsCommon.START_OUTDIR_DESCR)
    if argcomplete:
        arg.completer = argcomplete.completers.DirectoriesCompleter()

    text = ToolsCommon.get_start_reportid_descr(REPORTID_CHARS_DESCR)
    subpars.add_argument("--reportid", help=text)

    text = f"""This tool works by scheduling a delayed event, then sleeping and waiting for it to
                happen. This step is referred to as a "measurement cycle" and it is usually repeated
                many times. The launch distance defines how far in the future the delayed event is
                sceduled. By default this tool randomly selects launch distance within a range. The
                default range is [0,8ms], but you can override it with this option. Specify a
                comma-separated range (e.g '--ldist 10,5000'), or a single value if you want launch
                distance to be precisely that value all the time.  The default unit is microseconds,
                but you can use the following specifiers as well: {Human.DURATION_NS_SPECS_DESCR}.
                For example, '--ldist 10us,5ms' would be a [10,5000] microseconds range. Too small
                values may cause failures or prevent the SUT from reaching deep C-states. If the
                range starts with 0, the minimum possible launch distance value allowed by the
                delayed event source will be used. The optimal launch distance range is
                system-specific."""
    subpars.add_argument("-l", "--ldist", help=text, default="0,8000")

    text = """The logical CPU number to measure, default is CPU 0."""
    subpars.add_argument("--cpunum", help=text, type=int, default=0)

    text = f"""This option exists for debugging and troubleshooting purposes. Please, do not use
               for other reasons. While normally {OWN_NAME} kernel modules are unloaded after the
               measurements are done, with this option the modules will stay loaded into the
               kernel. Keep in mind that if the the specified 'devid' device was bound to some
               driver (e.g., a network driver), it will be unbinded and with this option it won't be
               binded back."""
    subpars.add_argument("--no-unload", action="store_true", help=text)

    text = ToolsCommon.get_post_trigger_descr("wake latency")
    subpars.add_argument("--post-trigger", metavar="POST_TRIGGER", type=Path, help=text)
    text = ToolsCommon.get_post_trigger_range_descr("wake latency")
    subpars.add_argument("--post-trigger-range", metavar="TRANGE", dest="trange", help=text)

    subpars.add_argument("--report", action="store_true", help=ToolsCommon.START_REPORT_DESCR)

    text = f"""By default {OWN_NAME} does not accept network card as a measurement device if its
               Linux network interface is in an active state, such as "up". Use '--force' to disable
               this safety mechanism. Use '--force' option with caution."""
    subpars.add_argument("--force", action="store_true", help=text)

    text = """The ID of the device to use for measuring the latency. For example, it can be a PCI
              address of the Intel I210 device, or "tdt" for the TSC deadline timer block of the
              CPU. Use the 'scan' command to get supported devices."""
    subpars.add_argument("devid", help=text)

    #
    # Create parsers for the "report" command.
    #
    text = "Create an HTML report."
    descr = """Create an HTML report for one or multiple test results."""
    subpars = subparsers.add_parser("report", help=text, description=descr)
    subpars.set_defaults(func=report_command)

    subpars.add_argument("-o", "--outdir", type=Path,
                         help=ToolsCommon.get_report_outdir_descr(OWN_NAME))
    subpars.add_argument("--rfilt", action=ArgParse.OrderedArg, help=ToolsCommon.RFILT_DESCR)
    subpars.add_argument("--rsel", action=ArgParse.OrderedArg, help=ToolsCommon.RSEL_DESCR)
    subpars.add_argument("--even-up-dp-count", action="store_true", dest="even_dpcnt",
                         help=ToolsCommon.EVEN_UP_DP_DESCR)
    subpars.add_argument("-x", "--xaxes", help=ToolsCommon.XAXES_DESCR % get_axes_default('xaxes'))
    subpars.add_argument("-y", "--yaxes", help=ToolsCommon.YAXES_DESCR % get_axes_default('yaxes'))
    subpars.add_argument("--hist", help=ToolsCommon.HIST_DESCR % get_axes_default('hist'))
    subpars.add_argument("--chist", help=ToolsCommon.CHIST_DESCR % get_axes_default('chist'))
    subpars.add_argument("--reportids", help=ToolsCommon.REPORTIDS_DESCR)
    subpars.add_argument("--title-descr", help=ToolsCommon.TITLE_DESCR)
    subpars.add_argument("--relocatable", action="store_true", help=ToolsCommon.RELOCATABLE_DESCR)
    subpars.add_argument("--list-columns", action="store_true", help=ToolsCommon.LIST_COLUMNS_DESCR)

    text = f"""One or multiple {OWN_NAME} test result paths."""
    subpars.add_argument("respaths", nargs="+", type=Path, help=text)

    #
    # Create parsers for the "filter" command.
    #
    text = "Filter datapoints out of a test result."
    subpars = subparsers.add_parser("filter", help=text, description=ToolsCommon.FILT_DESCR)
    subpars.set_defaults(func=ToolsCommon.filter_command)

    subpars.add_argument("--rfilt", action=ArgParse.OrderedArg, help=ToolsCommon.RFILT_DESCR)
    subpars.add_argument("--rsel", action=ArgParse.OrderedArg, help=ToolsCommon.RSEL_DESCR)
    subpars.add_argument("--cfilt", action=ArgParse.OrderedArg, help=ToolsCommon.CFILT_DESCR)
    subpars.add_argument("--csel", action=ArgParse.OrderedArg, help=ToolsCommon.CSEL_DESCR)
    subpars.add_argument("-o", "--outdir", type=Path, help=ToolsCommon.FILTER_OUTDIR_DESCR)
    subpars.add_argument("--list-columns", action="store_true", help=ToolsCommon.LIST_COLUMNS_DESCR)
    subpars.add_argument("--reportid", help=ToolsCommon.FILTER_REPORTID_DESCR)

    text = f"The {OWN_NAME} test result path to filter."
    subpars.add_argument("respath", type=Path, help=text)

    #
    # Create parsers for the "calc" command.
    #
    text = f"Calculate summary functions for a {OWN_NAME} test result."
    descr = f"""Calculates various summary functions for a {OWN_NAME} test result (e.g., the median
                value for one of the CSV columns)."""
    subpars = subparsers.add_parser("calc", help=text, description=descr)
    subpars.set_defaults(func=ToolsCommon.calc_command)

    subpars.add_argument("--rfilt", action=ArgParse.OrderedArg, help=ToolsCommon.RFILT_DESCR)
    subpars.add_argument("--rsel", action=ArgParse.OrderedArg, help=ToolsCommon.RSEL_DESCR)
    subpars.add_argument("--cfilt", action=ArgParse.OrderedArg, help=ToolsCommon.CFILT_DESCR)
    subpars.add_argument("--csel", action=ArgParse.OrderedArg, help=ToolsCommon.CSEL_DESCR)
    subpars.add_argument("-f", "--funcs", help=ToolsCommon.FUNCS_DESCR)
    subpars.add_argument("--list-funcs", action="store_true", help=ToolsCommon.LIST_FUNCS_DESCR)

    text = f"""The {OWN_NAME} test result path to calculate summary functions for."""
    subpars.add_argument("respath", type=Path, help=text)

    if argcomplete:
        argcomplete.autocomplete(parser)

    return parser

def parse_arguments():
    """Parse input arguments."""

    parser = build_arguments_parser()

    args = parser.parse_args()
    args.toolname = OWN_NAME
    args.minkver = "4.19-rc1"
    args.devtypes = Devices.DEVTYPES

    return args

def warn_trace_printk(proc):
    """
    Kernels before v5.6 did not have in-kernel synthetic trace event creation capabilities, so in
    that case 'wult' driver uses 'trace_printk()' to deliver the measurement results. But this is a
    debugging capability and should not be used for anything else. For now, we support pre-5.6
    kernels and 'trace_printk()', but we would like to remove the support. This function warns the
    user about the upcoming change.
    """

    kver = KernelVersion.get_kver(proc=proc)
    if KernelVersion.kver_lt(kver, "5.6"):
        LOG.warning("version of the kernel%s is %s, and soon it won't be supported.\nPlease, " \
                    "switch to kernel version 5.6 or newer.", proc.hostmsg, kver)

def check_settings(proc, dev, csinfo, cpunum, devid):
    """
    Some settings of the measured platform may lead to results that are potentially confusing for
    the user. This function looks for such settings and if found, prints a notice message.
      * proc - the 'Proc' or 'SSH' object that defines the host to run the measurements on.
      * dev - the delayed event device object created by 'Devices.WultDevice()'.
      * devid - the ID of the device used for measuring the latency.
      * csinfo - cstate info from 'CPUIdle.get_cstates_info()'.
      * cpunum - the logical CPU number to measure.
    """

    if dev.info.get("aspm_enabled"):
        LOG.notice("PCI ASPM is enabled for the delayed event device '%s', and this "
                    "typically increases the measured latency.", devid)

    enabled_cstates = []
    for _, info in csinfo.items():
        if info["disable"] == 0 and info["name"] != "POLL":
            enabled_cstates.append(info["name"])

    with contextlib.suppress(ErrorNotSupported), PowerCtl.PowerCtl(proc=proc) as powerctl:
        # Check for the following 3 conditions to be true at the same time.
        # * C6 is enabled.
        # * C6 pre-wake is enabled.
        # * The "timer" method is used.
        if devid == "timer" and "C6" in enabled_cstates:
            if powerctl.cstate_prewake_enabled(cpunum):
                LOG.notice("C-state prewake is enabled, and this usually hides the real "
                           "latency when using '%s' as delayed event device.", devid)

        # Check for the following 2 conditions to be true at the same time.
        # * C1 is enabled.
        # * C1E auto-promotion is enabled.
        if enabled_cstates == ["C1"]:
            if powerctl.c1e_autopromote_enabled(cpunum):
                LOG.notice("C1E autopromote is enabled, all C1 requests are converted to C1E.")

def start_command(args):
    """Implements the 'start' command."""

    if args.trange and not args.post_trigger:
        raise Error("specify post trigger program to run")

    proc = ToolsCommon.get_proc(args, args.hostname)

    warn_trace_printk(proc)

    if ToolsCommon.is_deploy_needed(proc, OWN_NAME):
        msg = f"'{OWN_NAME}' drivers are not up-to-date{proc.hostmsg}', " \
              f"please run: {OWN_NAME} deploy"
        if proc.is_remote:
            msg += f" -H {proc.hostname}"
        LOG.warning(msg)

    if not args.reportid and proc.is_remote:
        prefix = proc.hostname
    else:
        prefix = None
    args.reportid = ReportID.format_reportid(prefix=prefix, reportid=args.reportid,
                                             strftime=f"{OWN_NAME}-{args.devid}-%Y%m%d",
                                             additional_chars=REPORTID_ADDITIONAL_CHARS)

    if not args.outdir:
        args.outdir = Path(f"./{args.reportid}")
    if args.tlimit:
        args.tlimit = Human.parse_duration(args.tlimit, default_unit="m", name="time limit")
    if args.ldist:
        args.ldist = ToolsCommon.parse_ldist(args.ldist)
    args.cpunum = ToolsCommon.parse_cpunum(args.cpunum, proc=proc)
    if args.trange:
        args.trange = ToolsCommon.parse_trange(args.trange)

    cont = not args.start_over
    with WORawResult.WultWORawResult(args.reportid, args.outdir, VERSION, args.cpunum,
                                     cont=cont) as res:
        dpcnt = ToolsCommon.get_dpcnt(res, args.dpcnt)
        if not dpcnt:
            return

        # Configure the logger to print to both the console and the log file.
        try:
            res.logs_path.mkdir(exist_ok=True)
        except OSError as err:
            raise Error(f"cannot create log directory '{res.logs_path}': {err}") from None
        logfile = res.logs_path / f"{OWN_NAME}.log.txt"
        Logging.setup_logger(OWN_NAME, info_logfile=logfile, error_logfile=logfile)

        with Devices.WultDevice(args.devid, args.cpunum, proc, force=args.force) as dev:
            with CPUIdle.CPUIdle(proc=proc) as cpuidle:
                csinfo = cpuidle.get_cstates_info_dict(res.cpunum)
            check_settings(proc, dev, csinfo, args.cpunum, args.devid)

            with WultRunner.WultRunner(proc, dev, res, ldist=args.ldist, csinfo=csinfo) as runner:
                runner.unload = not args.no_unload
                if args.post_trigger:
                    runner.set_post_trigger(args.post_trigger, trange=args.trange)
                runner.prepare()
                runner.run(dpcnt=dpcnt, tlimit=args.tlimit)

    if not args.report:
        return

    rsts = ToolsCommon.open_raw_results([args.outdir], args.toolname)
    rep = WultHTMLReport.WultHTMLReport(rsts, args.outdir, title_descr=args.reportid)
    rep.relocatable = False
    rep.set_hover_colnames(HOVER_COLNAME_REGEXS)
    rep.generate()

def report_command(args):
    """Implements the 'report' command."""

    # Split the comma-separated lists.
    for name in ("xaxes", "yaxes", "hist", "chist"):
        val = getattr(args, name)
        if val:
            if val == "none":
                setattr(args, name, "")
            else:
                setattr(args, name, Trivial.split_csv_line(val))

    rsts = ToolsCommon.open_raw_results(args.respaths, args.toolname, reportids=args.reportids,
                                        reportid_additional_chars=REPORTID_ADDITIONAL_CHARS)

    if args.list_columns:
        ToolsCommon.list_result_columns(rsts)
        return

    for res in rsts:
        ToolsCommon.apply_filters(args, res)

    if args.even_dpcnt:
        ToolsCommon.even_up_dpcnt(rsts)

    if args.outdir is None:
        args.outdir = ReportID.format_reportid(prefix=f"{OWN_NAME}-report",
                                               reportid=rsts[0].reportid,
                                               additional_chars=REPORTID_ADDITIONAL_CHARS)

    rep = WultHTMLReport.WultHTMLReport(rsts, args.outdir, title_descr=args.title_descr,
                                        xaxes=args.xaxes, yaxes=args.yaxes, hist=args.hist,
                                        chist=args.chist)
    rep.relocatable = args.relocatable
    rep.set_hover_colnames(HOVER_COLNAME_REGEXS)
    rep.generate()

def load_command(args):
    """Implements the 'load' command."""

    proc = ToolsCommon.get_proc(args, args.hostname)
    with Devices.WultDevice(args.devid, 0, proc, force=args.force) as dev:
        with EventsProvider.EventsProvider(dev, 0, proc) as ep:
            ep.unload = not args.no_unload
            ep.prepare()
            LOG.info("Loaded the '%s' %s delayed event driver", ep.dev.drvname, OWN_NAME)

def main():
    """Script entry point."""

    args = parse_arguments()

    if getattr(args, "func", None):
        args.func(args)
    else:
        LOG.error("please, run '%s -h' for help.", OWN_NAME)
        raise SystemExit(1)

    return 0

# The script entry point.
if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        LOG.info("Interrupted, exiting")
    except Error as err:
        LOG.error_out(err)
